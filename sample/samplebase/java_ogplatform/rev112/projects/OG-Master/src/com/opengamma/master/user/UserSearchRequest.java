/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.master.user;

import java.util.Map;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.id.ExternalIdBundle;
import com.opengamma.id.ExternalIdSearch;
import com.opengamma.master.AbstractDocument;
import com.opengamma.master.AbstractSearchRequest;
import com.opengamma.util.PublicSPI;

/**
 * Request for searching for users. 
 */
@PublicSPI
@BeanDefinition
public class UserSearchRequest extends AbstractSearchRequest {

  /**
   * The exchange user identifiers to match, null to not match on user identifiers.
   */
  @PropertyDefinition
  private ExternalIdSearch _externalIdSearch;
  /**
   * The user name to search for.
   */
  @PropertyDefinition
  private String _userName;
  
  public UserSearchRequest addExternalId(ExternalId id) {
    if (getExternalIdSearch() == null) {
      setExternalIdSearch(new ExternalIdSearch());
    }
    getExternalIdSearch().addExternalId(id);
    return this;
  }

  public UserSearchRequest addExternalIdBundle(ExternalIdBundle idBundle) {
    if (getExternalIdSearch() == null) {
      setExternalIdSearch(new ExternalIdSearch());
    }
    getExternalIdSearch().addExternalIds(idBundle);
    return this;
  }

  @Override
  public boolean matches(AbstractDocument document) {
    if (!(document instanceof UserDocument)) {
      return false;
    }
    UserDocument userDoc = (UserDocument) document;
    ManageableOGUser user = userDoc.getUser();
    if ((getUserName() != null) && !getUserName().equals(user.getName())) {
      return false;
    }
    if (getExternalIdSearch() != null && getExternalIdSearch().matches(user.getExternalIdBundle()) == false) {
      return false;
    }
    return true;
  }
  
  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code UserSearchRequest}.
   * @return the meta-bean, not null
   */
  public static UserSearchRequest.Meta meta() {
    return UserSearchRequest.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(UserSearchRequest.Meta.INSTANCE);
  }

  @Override
  public UserSearchRequest.Meta metaBean() {
    return UserSearchRequest.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -265376882:  // externalIdSearch
        return getExternalIdSearch();
      case -266666762:  // userName
        return getUserName();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -265376882:  // externalIdSearch
        setExternalIdSearch((ExternalIdSearch) newValue);
        return;
      case -266666762:  // userName
        setUserName((String) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      UserSearchRequest other = (UserSearchRequest) obj;
      return JodaBeanUtils.equal(getExternalIdSearch(), other.getExternalIdSearch()) &&
          JodaBeanUtils.equal(getUserName(), other.getUserName()) &&
          super.equals(obj);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash += hash * 31 + JodaBeanUtils.hashCode(getExternalIdSearch());
    hash += hash * 31 + JodaBeanUtils.hashCode(getUserName());
    return hash ^ super.hashCode();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the exchange user identifiers to match, null to not match on user identifiers.
   * @return the value of the property
   */
  public ExternalIdSearch getExternalIdSearch() {
    return _externalIdSearch;
  }

  /**
   * Sets the exchange user identifiers to match, null to not match on user identifiers.
   * @param externalIdSearch  the new value of the property
   */
  public void setExternalIdSearch(ExternalIdSearch externalIdSearch) {
    this._externalIdSearch = externalIdSearch;
  }

  /**
   * Gets the the {@code externalIdSearch} property.
   * @return the property, not null
   */
  public final Property<ExternalIdSearch> externalIdSearch() {
    return metaBean().externalIdSearch().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the user name to search for.
   * @return the value of the property
   */
  public String getUserName() {
    return _userName;
  }

  /**
   * Sets the user name to search for.
   * @param userName  the new value of the property
   */
  public void setUserName(String userName) {
    this._userName = userName;
  }

  /**
   * Gets the the {@code userName} property.
   * @return the property, not null
   */
  public final Property<String> userName() {
    return metaBean().userName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code UserSearchRequest}.
   */
  public static class Meta extends AbstractSearchRequest.Meta {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code externalIdSearch} property.
     */
    private final MetaProperty<ExternalIdSearch> _externalIdSearch = DirectMetaProperty.ofReadWrite(
        this, "externalIdSearch", UserSearchRequest.class, ExternalIdSearch.class);
    /**
     * The meta-property for the {@code userName} property.
     */
    private final MetaProperty<String> _userName = DirectMetaProperty.ofReadWrite(
        this, "userName", UserSearchRequest.class, String.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
      this, (DirectMetaPropertyMap) super.metaPropertyMap(),
        "externalIdSearch",
        "userName");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -265376882:  // externalIdSearch
          return _externalIdSearch;
        case -266666762:  // userName
          return _userName;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends UserSearchRequest> builder() {
      return new DirectBeanBuilder<UserSearchRequest>(new UserSearchRequest());
    }

    @Override
    public Class<? extends UserSearchRequest> beanType() {
      return UserSearchRequest.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code externalIdSearch} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalIdSearch> externalIdSearch() {
      return _externalIdSearch;
    }

    /**
     * The meta-property for the {@code userName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> userName() {
      return _userName;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
