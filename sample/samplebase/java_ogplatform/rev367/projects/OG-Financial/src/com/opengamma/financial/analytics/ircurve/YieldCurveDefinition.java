/**
 * Copyright (C) 2009 - present by OpenGamma Inc. and the OpenGamma group of companies
 * 
 * Please see distribution for license.
 */
package com.opengamma.financial.analytics.ircurve;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBean;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.id.ExternalId;
import com.opengamma.id.MutableUniqueIdentifiable;
import com.opengamma.id.UniqueId;
import com.opengamma.id.UniqueIdentifiable;
import com.opengamma.util.ArgumentChecker;
import com.opengamma.util.money.Currency;

/**
 * Definition of a yield curve.
 * <p>
 * This definition uses a set of {@code FixedIncomeStrip} instances.
 * <p>
 * This class is mutable.
 */
@BeanDefinition
public class YieldCurveDefinition extends DirectBean
    implements Serializable, UniqueIdentifiable, MutableUniqueIdentifiable {

  /** Serialization version. */
  private static final long serialVersionUID = 1L;

  /**
   * The unique identifier of the yield curve.
   */
  @PropertyDefinition
  private UniqueId _uniqueId;
  /**
   * The currency that the curve is for.
   */
  @PropertyDefinition
  private final Currency _currency;
  /**
   * The region that the curve is for.
   */
  @PropertyDefinition
  private final ExternalId _region;
  /**
   * The display name of the curve.
   */
  @PropertyDefinition
  private final String _name;
  /**
   * The name of the interpolator to use.
   */
  @PropertyDefinition
  private final String _interpolatorName;
  /**
   * The underlying strips.
   */
  @PropertyDefinition
  private final SortedSet<FixedIncomeStrip> _strips = new TreeSet<FixedIncomeStrip>();

  /**
   * Creates an instance for Joda-Beans.
   */
  private YieldCurveDefinition() {
    throw new UnsupportedOperationException();
  }

  /**
   * Creates an instance.
   * 
   * @param currency  the currency of the curve, not null
   * @param region  the region of the curve, may be null
   * @param name  the display name, may be null
   * @param interpolatorName  the interpolator name, not null
   */
  public YieldCurveDefinition(
      Currency currency, ExternalId region, String name, String interpolatorName) {
    this(currency, region, name, interpolatorName, Collections.<FixedIncomeStrip>emptySet());
  }

  /**
   * Creates an instance.
   * 
   * @param currency  the currency of the curve, not null
   * @param region  the region of the curve, may be null
   * @param name  the display name, may be null
   * @param interpolatorName  the interpolator name, not null
   * @param strips  the underlying strips, null treated as empty list
   */
  public YieldCurveDefinition(
      Currency currency, ExternalId region, String name, String interpolatorName,
      Iterable<? extends FixedIncomeStrip> strips) {
    ArgumentChecker.notNull(currency, "currency");
    ArgumentChecker.notNull(interpolatorName, "interpolatorName");
    _currency = currency;
    _region = region;
    _name = name;
    _interpolatorName = interpolatorName;
    if (strips != null) {
      for (FixedIncomeStrip strip : strips) {
        addStrip(strip);
      }
    }
  }

  //-------------------------------------------------------------------------
  /**
   * Adds a strip to the yield curve definition.
   * 
   * @param strip  the strip to add, not null
   */
  public void addStrip(FixedIncomeStrip strip) {
    ArgumentChecker.notNull(strip, "Strip");
    _strips.add(strip);
  }

  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code YieldCurveDefinition}.
   * @return the meta-bean, not null
   */
  public static YieldCurveDefinition.Meta meta() {
    return YieldCurveDefinition.Meta.INSTANCE;
  }
  static {
    JodaBeanUtils.registerMetaBean(YieldCurveDefinition.Meta.INSTANCE);
  }

  @Override
  public YieldCurveDefinition.Meta metaBean() {
    return YieldCurveDefinition.Meta.INSTANCE;
  }

  @Override
  protected Object propertyGet(String propertyName, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        return getUniqueId();
      case 575402001:  // currency
        return getCurrency();
      case -934795532:  // region
        return getRegion();
      case 3373707:  // name
        return getName();
      case -1247314958:  // interpolatorName
        return getInterpolatorName();
      case -891985829:  // strips
        return getStrips();
    }
    return super.propertyGet(propertyName, quiet);
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void propertySet(String propertyName, Object newValue, boolean quiet) {
    switch (propertyName.hashCode()) {
      case -294460212:  // uniqueId
        setUniqueId((UniqueId) newValue);
        return;
      case 575402001:  // currency
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: currency");
      case -934795532:  // region
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: region");
      case 3373707:  // name
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: name");
      case -1247314958:  // interpolatorName
        if (quiet) {
          return;
        }
        throw new UnsupportedOperationException("Property cannot be written: interpolatorName");
      case -891985829:  // strips
        setStrips((SortedSet<FixedIncomeStrip>) newValue);
        return;
    }
    super.propertySet(propertyName, newValue, quiet);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      YieldCurveDefinition other = (YieldCurveDefinition) obj;
      return JodaBeanUtils.equal(getUniqueId(), other.getUniqueId()) &&
          JodaBeanUtils.equal(getCurrency(), other.getCurrency()) &&
          JodaBeanUtils.equal(getRegion(), other.getRegion()) &&
          JodaBeanUtils.equal(getName(), other.getName()) &&
          JodaBeanUtils.equal(getInterpolatorName(), other.getInterpolatorName()) &&
          JodaBeanUtils.equal(getStrips(), other.getStrips());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getUniqueId());
    hash += hash * 31 + JodaBeanUtils.hashCode(getCurrency());
    hash += hash * 31 + JodaBeanUtils.hashCode(getRegion());
    hash += hash * 31 + JodaBeanUtils.hashCode(getName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getInterpolatorName());
    hash += hash * 31 + JodaBeanUtils.hashCode(getStrips());
    return hash;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the unique identifier of the yield curve.
   * @return the value of the property
   */
  public UniqueId getUniqueId() {
    return _uniqueId;
  }

  /**
   * Sets the unique identifier of the yield curve.
   * @param uniqueId  the new value of the property
   */
  public void setUniqueId(UniqueId uniqueId) {
    this._uniqueId = uniqueId;
  }

  /**
   * Gets the the {@code uniqueId} property.
   * @return the property, not null
   */
  public final Property<UniqueId> uniqueId() {
    return metaBean().uniqueId().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the currency that the curve is for.
   * @return the value of the property
   */
  public Currency getCurrency() {
    return _currency;
  }

  /**
   * Gets the the {@code currency} property.
   * @return the property, not null
   */
  public final Property<Currency> currency() {
    return metaBean().currency().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the region that the curve is for.
   * @return the value of the property
   */
  public ExternalId getRegion() {
    return _region;
  }

  /**
   * Gets the the {@code region} property.
   * @return the property, not null
   */
  public final Property<ExternalId> region() {
    return metaBean().region().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the display name of the curve.
   * @return the value of the property
   */
  public String getName() {
    return _name;
  }

  /**
   * Gets the the {@code name} property.
   * @return the property, not null
   */
  public final Property<String> name() {
    return metaBean().name().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the name of the interpolator to use.
   * @return the value of the property
   */
  public String getInterpolatorName() {
    return _interpolatorName;
  }

  /**
   * Gets the the {@code interpolatorName} property.
   * @return the property, not null
   */
  public final Property<String> interpolatorName() {
    return metaBean().interpolatorName().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the underlying strips.
   * @return the value of the property
   */
  public SortedSet<FixedIncomeStrip> getStrips() {
    return _strips;
  }

  /**
   * Sets the underlying strips.
   * @param strips  the new value of the property
   */
  public void setStrips(SortedSet<FixedIncomeStrip> strips) {
    this._strips.clear();
    this._strips.addAll(strips);
  }

  /**
   * Gets the the {@code strips} property.
   * @return the property, not null
   */
  public final Property<SortedSet<FixedIncomeStrip>> strips() {
    return metaBean().strips().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code YieldCurveDefinition}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code uniqueId} property.
     */
    private final MetaProperty<UniqueId> _uniqueId = DirectMetaProperty.ofReadWrite(
        this, "uniqueId", YieldCurveDefinition.class, UniqueId.class);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofReadWrite(
        this, "currency", YieldCurveDefinition.class, Currency.class);
    /**
     * The meta-property for the {@code region} property.
     */
    private final MetaProperty<ExternalId> _region = DirectMetaProperty.ofReadWrite(
        this, "region", YieldCurveDefinition.class, ExternalId.class);
    /**
     * The meta-property for the {@code name} property.
     */
    private final MetaProperty<String> _name = DirectMetaProperty.ofReadWrite(
        this, "name", YieldCurveDefinition.class, String.class);
    /**
     * The meta-property for the {@code interpolatorName} property.
     */
    private final MetaProperty<String> _interpolatorName = DirectMetaProperty.ofReadWrite(
        this, "interpolatorName", YieldCurveDefinition.class, String.class);
    /**
     * The meta-property for the {@code strips} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<SortedSet<FixedIncomeStrip>> _strips = DirectMetaProperty.ofReadWrite(
        this, "strips", YieldCurveDefinition.class, (Class) SortedSet.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<Object>> _map = new DirectMetaPropertyMap(
        this, null,
        "uniqueId",
        "currency",
        "region",
        "name",
        "interpolatorName",
        "strips");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case -294460212:  // uniqueId
          return _uniqueId;
        case 575402001:  // currency
          return _currency;
        case -934795532:  // region
          return _region;
        case 3373707:  // name
          return _name;
        case -1247314958:  // interpolatorName
          return _interpolatorName;
        case -891985829:  // strips
          return _strips;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends YieldCurveDefinition> builder() {
      return new DirectBeanBuilder<YieldCurveDefinition>(new YieldCurveDefinition());
    }

    @Override
    public Class<? extends YieldCurveDefinition> beanType() {
      return YieldCurveDefinition.class;
    }

    @Override
    public Map<String, MetaProperty<Object>> metaPropertyMap() {
      return _map;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code uniqueId} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<UniqueId> uniqueId() {
      return _uniqueId;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code region} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<ExternalId> region() {
      return _region;
    }

    /**
     * The meta-property for the {@code name} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> name() {
      return _name;
    }

    /**
     * The meta-property for the {@code interpolatorName} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> interpolatorName() {
      return _interpolatorName;
    }

    /**
     * The meta-property for the {@code strips} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<SortedSet<FixedIncomeStrip>> strips() {
      return _strips;
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
